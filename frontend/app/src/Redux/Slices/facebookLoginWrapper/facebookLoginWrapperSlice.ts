import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../../store';
import { fetchActive } from './facebookLoginWrapperAPI';

// Define a type for the slice state
export interface FacebookLoginWrapperState {
  status: 'loading' | 'loggedIn' | 'loggedOut'
}

// Define the initial state using that type
const initialState: FacebookLoginWrapperState = {
  status: "loading"
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getActiveAsync = createAsyncThunk(
  'facebookLoginWrapper/fetchActive',
  async () => {
    const response = await fetchActive();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const facebookLoginWrapperSlice = createSlice({
  name: 'facebookLoginWrapper',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setDisabled: (state, action) => {
      state.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getActiveAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getActiveAsync.fulfilled, (state, action) => {
        if (action.payload)
          state.status = "loggedIn";
        else
          state.status = "loggedOut";
      });
  },
});

export const { setDisabled } = facebookLoginWrapperSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectStatus = (state: RootState) => state.facebookLoginWrapper.status;

export default facebookLoginWrapperSlice.reducer;