import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store';
import { fetchSentimentAnalysis } from './facebookAPI';

interface SentimentAnalysis {
    positve: number,
    neutral: number,
    negative: number
}

// Define a type for the slice state
export interface FacebookState {
  sentimentAnalysis: SentimentAnalysis;
  isSentimentAnalysisLoading: boolean;
  error: string | null;
}

// Define the initial state using that type
const initialState: FacebookState = {
  sentimentAnalysis: {
    positve: -1,
    neutral: -1,
    negative: -1,
  },
  isSentimentAnalysisLoading: false,
  error: null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCommentsSentimentAnalysis = createAsyncThunk(
  'facebook/sentiment_analysis',
  async () => {
    const response = await fetchSentimentAnalysis('20220401', '20220425');
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const facebookSlice = createSlice({
  name: 'facebook',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCommentsSentimentAnalysis.pending, (state) => {
        state.isSentimentAnalysisLoading = true;
        state.error = null;
      })
      .addCase(getCommentsSentimentAnalysis.fulfilled, (state, { payload }) => {
        state.isSentimentAnalysisLoading = false;
        state.sentimentAnalysis = payload.results;
        state.error = null;
      })
      .addCase(getCommentsSentimentAnalysis.rejected, (state, { payload }: any) => {
        state.isSentimentAnalysisLoading = false;
        state.error = payload?.message || "There was a problem retrieving the sentiment analysis data.";
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const orderSliceSelector = (state: RootState) => state['facebook'];

export const selectSentimentAnalysis = (state: RootState) => state.facebook.sentimentAnalysis;
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default facebookSlice.reducer;