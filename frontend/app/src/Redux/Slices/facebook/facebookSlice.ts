import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Root } from 'react-dom/client';
import { RootState, AppThunk } from '../../store';
import { fetchSentimentAnalysis } from './facebookAPI';

interface SentimentAnalysis {
    positive: number,
    neutral: number,
    negative: number
}

// Define a type for the slice state
export interface FacebookState {
  sentimentAnalysis: SentimentAnalysis;
  isSentimentAnalysisLoading: boolean;
  error: string | null;
  startDate: String;
  endDate: String
}

// Define the initial state using that type
const initialState: FacebookState = {
  sentimentAnalysis: {
    positive: -1,
    neutral: -1,
    negative: -1,
  },
  isSentimentAnalysisLoading: false,
  error: null,
  startDate: new Date().toISOString(),
  endDate: new Date().toISOString()
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCommentsSentimentAnalysis = createAsyncThunk(
  'facebook/sentiment_analysis',
  async (_, { dispatch, getState, rejectWithValue } : any) => {
    // try {

    // } catch (e) {}
    console.log("in thunk");
    console.log("getState:", getState());
    const startDate = selectStartDate(getState()).split("T")[0].replaceAll("-", "");
    console.log("in thunk1");
    const endDate = selectEndDate(getState()).split("T")[0].replaceAll("-", "");
    console.log("~~~startDate:", startDate, "~~~endDate:", endDate);
    const response = await fetchSentimentAnalysis(startDate, endDate);
    // The value we return becomes the `fulfilled` action payload
    console.log("Data returned: ", response);
    return response;
  }
);

export const facebookSlice = createSlice({
  name: 'facebook',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStartDate: (state, action) => {
      console.log("setStartDate", action);
      state.startDate = action.payload;
    },
    setEndDate: (state, action) => {
      state.endDate = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCommentsSentimentAnalysis.pending, (state) => {
        state.isSentimentAnalysisLoading = true;
        state.error = null;
      })
      .addCase(getCommentsSentimentAnalysis.fulfilled, (state, { payload }) => {
        state.isSentimentAnalysisLoading = false;
        state.sentimentAnalysis = payload;
        state.error = null;
      })
      .addCase(getCommentsSentimentAnalysis.rejected, (state, { payload }: any) => {
        state.isSentimentAnalysisLoading = false;
        state.error = payload?.message || "There was a problem retrieving the sentiment analysis data.";
      });
  },
});


export const { setStartDate, setEndDate } = facebookSlice.actions;

export const selectSentimentAnalysis = (state: RootState) => state.facebook.sentimentAnalysis;
export const selectStartDate = (state: RootState) => state.facebook.startDate;
export const selectEndDate = (state: RootState) => state.facebook.endDate;
export const selectError = (state: RootState) => state.facebook.error;

export default facebookSlice.reducer;